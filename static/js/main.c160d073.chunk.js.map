{"version":3,"sources":["components/List/List.jsx","components/Form/Form.jsx","components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["List","filterTodos","checkedHandler","selecUser","className","map","todo","key","id","completed","type","name","onChange","checked","readOnly","title","onClick","userId","Form","inputTitle","defaultSelect","handleInput","label","value","TodoList","state","fitterByTitle","toLowerCase","includes","target","setState","filterByStatus","this","props","todos","randomizTodo","filter","length","variant","color","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","user","prevProps","clearUser","email","phone","App","selectedUserId","todoId","item","find","element","selectUser","i","random","Math","floor","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c160d073.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nexport const List = ({ filterTodos, checkedHandler, selecUser }) => (\n  <ul className=\"TodoList__list\">\n    {filterTodos.map(todo => (\n      <li\n        key={todo.id}\n        className={className('TodoList__item', {\n          'TodoList__item--checked': todo.completed === true,\n          ' TodoList__item--unchecked': todo.completed === false,\n        })}\n      >\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"completed\"\n            onChange={() => checkedHandler(todo.id)}\n            checked={todo.completed}\n            readOnly\n          />\n          <p>{todo.title}</p>\n        </label>\n        <button\n          className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n          \"\n          type=\"button\"\n          onClick={() => {\n            selecUser(todo.userId);\n          }}\n        >\n          {`User #${todo.userId}`}\n        </button>\n      </li>\n    ))\n    }\n  </ul>\n);\n\nList.propTypes = {\n  filterTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  checkedHandler: PropTypes.func.isRequired,\n  selecUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Form = ({ inputTitle, defaultSelect, handleInput }) => (\n  <form className=\"TodoList__form\">\n    <input\n      className=\"TodoList__input\"\n      label=\"Search todos\"\n      name=\"inputTitle\"\n      id=\"outline-size-small\"\n      value={inputTitle}\n      onChange={handleInput}\n    />\n    <select\n      className=\"TodoList__select\"\n      name=\"defaultSelect\"\n      value={defaultSelect}\n      onChange={handleInput}\n    >\n      <option value=\"Show All\">\n        Show All\n      </option>\n      <option value=\"Show Completed\">\n        Show Completed\n      </option>\n      <option value=\"Show Active\">\n        Show Active\n      </option>\n    </select>\n  </form>\n);\n\nForm.propTypes = {\n  inputTitle: PropTypes.string.isRequired,\n  defaultSelect: PropTypes.string.isRequired,\n  handleInput: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from '../List';\nimport { Form } from '../Form';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputTitle: '',\n    defaultSelect: 'Show All',\n  }\n\n  fitterByTitle = (todo) => {\n    const { inputTitle } = this.state;\n\n    return todo.title.toLowerCase()\n      .includes(inputTitle.toLowerCase());\n  }\n\n  handleInput = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  filterByStatus = (todo) => {\n    const { defaultSelect } = this.state;\n\n    switch (defaultSelect) {\n      case 'Show Completed':\n        return todo.completed;\n      case 'Show Active':\n        return !todo.completed;\n      default:\n        return true;\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      checkedHandler,\n      selecUser,\n      randomizTodo,\n    } = this.props;\n\n    const {\n      inputTitle,\n      defaultSelect,\n    } = this.state;\n\n    const filterTodos = todos\n      .filter(this.fitterByTitle)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>{`Todos: ${filterTodos.length}`}</h2>\n        <div className=\"TodoList__box\">\n          <button\n            className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n            \"\n            type=\"button\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => {\n              randomizTodo(todos);\n            }}\n          >\n            Random\n          </button>\n          <Form\n            handleInput={this.handleInput}\n            inputTitle={inputTitle}\n            defaultSelect={defaultSelect}\n          />\n        </div>\n        <List\n          filterTodos={filterTodos}\n          checkedHandler={checkedHandler}\n          selecUser={selecUser}\n        />\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  checkedHandler: PropTypes.func.isRequired,\n  selecUser: PropTypes.func.isRequired,\n  randomizTodo: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}: ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getAllTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({\n          user,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((user) => {\n          this.setState({\n            user,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <>\n        {\n          user === null ? (\n            <h2>Error</h2>\n          )\n            : (\n              <div className=\"user\">\n                <h2 className=\"user__title\">\n                  <span>{`Selected user: ${user.id}`}</span>\n                </h2>\n\n                <h3 className=\"user__name\">{user.name}</h3>\n                <p className=\"user__email\">{user.email}</p>\n                <p className=\"user__phone\">{user.phone}</p>\n                <button\n                  className=\"button\"\n                  type=\"button\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    clearUser();\n                  }}\n                >\n                  Clear\n                </button>\n              </div>\n            )\n        }\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos().then((todos) => {\n      const res = this.filterTodos(todos);\n\n      this.setState({\n        todos: res,\n      });\n    });\n  }\n\n  checkedHandler = (todoId) => {\n    this.setState((state) => {\n      const item = [...state.todos]\n        .find(element => element.id === todoId);\n\n      item.completed = !item.completed;\n\n      return {\n        todos: [...state.todos],\n      };\n    });\n  }\n\n  filterTodos = todos => todos\n    .filter(todo => typeof todo.userId === 'number')\n    .filter(todo => typeof todo.completed === 'boolean')\n    .filter(todo => todo.title !== '')\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  randomizTodo = (todos) => {\n    for (let i = todos.length - 1; i > 0; i -= 1) {\n      const random = Math.floor(Math.random() * (i + 1));\n\n      // eslint-disable-next-line no-param-reassign\n      [todos[i], todos[random]] = [todos[random], todos[i]];\n    }\n\n    this.setState({ todos });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            checkedHandler={this.checkedHandler}\n            selecUser={this.selectUser}\n            randomizTodo={this.randomizTodo}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}